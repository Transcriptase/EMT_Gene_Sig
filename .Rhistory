labels = paste(annot$exp,
annot$batch,
sep = " "
)
)
batch_design <- model.matrix(~0 + exp.trts + batch.trts)
batch_fit <- lmFit(selDataMatrix, batch_design)
batch_corrected <- selDataMatrix -
batch_fit$coefficients[,'batch.trtsB']%*%t(batch_design[,'batch.trtsB'])
batchclust <- standard.pearson(batch_corrected)
plot(batchclust,
labels = paste(annot$exp,
annot$batch,
sep = " "
)
)
comcorrected <- ComBat(selDataMatrix, annot$batch, annot$exp)
comclust <- standard.pearson(comcorrected)
plot(comclust,
labels = paste(annot$exp,
annot$batch,
sep = " "
)
)
mapping_info <- as.data.frame(nuID2RefSeqID(probeList,
lib.mapping='lumiMouseIDMapping',
returnAllInfo = TRUE))
hk.trts <- rep(0, ncol(selDataMatrix))
names(hk.trts) <- colnames(selDataMatrix)
hk.names <- c("Gapdh",
"Ppp2r1a",
"Gsk3a",
"Ndufa1",
"Actb",
"Rpl3",
"Ppia",
"Col6a1",
"Mapkapk2")
gene_values <- function(gene_sym){
probes <- rownames(mapping_info[which(mapping_info$Symbol == gene_sym),])
gene_values <- selDataMatrix[probes,]
if (length(probes) > 1) gene_values <- apply(gene_values, 2, mean)
med_cent <- gene_values - median(gene_values)
return(med_cent)
}
hk.values <- sapply(hk.names, gene_values)
hk.trts <- apply(hk.values, 1, mean)
hk.trts
mapping_info <- as.data.frame(nuID2RefSeqID(probeList,
lib.mapping='lumiMouseIDMapping',
returnAllInfo = TRUE))
hk.trts <- rep(0, ncol(twiDataMatrix))
names(hk.trts) <- colnames(twiDataMatrix)
hk.names <- c("Gapdh",
"Ppp2r1a",
"Gsk3a",
"Ndufa1",
"Actb",
"Rpl3",
"Ppia",
"Col6a1",
"Mapkapk2")
gene_values <- function(gene_sym){
probes <- rownames(mapping_info[which(mapping_info$Symbol == gene_sym),])
gene_values <- twiDataMatrix[probes,]
if (length(probes) > 1) gene_values <- apply(gene_values, 2, mean)
med_cent <- gene_values - median(gene_values)
return(med_cent)
}
hk.values <- sapply(hk.names, gene_values)
hk.trts <- apply(hk.values, 1, mean)
hk.trts
hk_design <- model.matrix(~0 + twi_exp + twi_batch + hk.trts)
hk_fit <- lmFit(selDataMatrix, hk_design)
hk_corrected <- selDataMatrix -
hk_fit$coefficients[,'hk.trts']%*%t(batch_design[,'hk.trts'])
hk_design <- model.matrix(~0 + twi_exp + twi_batch + hk.trts)
hk_fit <- lmFit(twiDataMatrix, hk_design)
hk_corrected <- twiDataMatrix -
hk_fit$coefficients[,'hk.trts']%*%t(batch_design[,'hk.trts'])
hk_corrected <- twiDataMatrix -
hk_fit$coefficients[,'hk.trts']%*%t(hk_design[,'hk.trts'])
hk.trts <- rep(0, ncol(twi_com))
names(hk.trts) <- colnames(twi_com)
hk.names <- c("Gapdh",
"Ppp2r1a",
"Gsk3a",
"Ndufa1",
"Actb",
"Rpl3",
"Ppia",
"Col6a1",
"Mapkapk2")
gene_values <- function(gene_sym){
probes <- rownames(mapping_info[which(mapping_info$Symbol == gene_sym),])
gene_values <- twi_com[probes,]
if (length(probes) > 1) gene_values <- apply(gene_values, 2, mean)
med_cent <- gene_values - median(gene_values)
return(med_cent)
}
hk.values <- sapply(hk.names, gene_values)
hk.trts <- apply(hk.values, 1, mean)
hk.trts
hk_design <- model.matrix(~0 + twi_exp + twi_batch + hk.trts)
hk_fit <- lmFit(twiDataMatrix, hk_design)
hk_corrected <- twiDataMatrix -
hk_fit$coefficients[,'hk.trts']%*%t(hk_design[,'hk.trts'])
hk_fit <- lmFit(hk_corrected, twi_design)
hk_fit2 <- eBayes(contrasts.fit(twi_fit, twiMT_M.contrasts))
hk_fit2$genes$Symbol <- getSYMBOL(hk_fit2$genes$ID,'lumiMouseAll.db')
hkM_MT_results <- topTable(hk_fit2,number=length(which(topTable(hk_fit2,adjust.method='BH',
number=length(hk_fit2$genes$ID))$adj.P.Val<.05)),
adjust.method='BH')
genes_only <- twiM_MT_results[which(twiM_MT_results$Symbol != "NA"),]
View(genes_only)
genes_only <- hkM_MT_results[which(hkM_MT_results$Symbol != "NA"),]
View(genes_only)
twi_design <- model.matrix(~0 + twi_exp + twi_batch)
twiMT_M.contrasts <- makeContrasts(twi_expPri_MT-twi_expPri_M,
levels=twi_design)
fit <- lmFit(twiDataMatrix, twi_design)
fit2 <- eBayes(contrasts.fit(fit, twiMT_M.contrasts))
fit2$genes$Symbol <- getSYMBOL(twi_fit2$genes$ID,'lumiMouseAll.db')
fit2$genes$RefSeq <- nuID2RefSeqID(twi_fit2$genes$ID, lib.mapping = "lumiMouseIDMapping")
results <- topTable(fit2,number=length(which(topTable(fit2,adjust.method='BH',
number=length(fit2$genes$ID))$adj.P.Val<.05)),
adjust.method='BH')
genes_only <- results[which(results$Symbol != "NA"),]
write.csv(genes_only, "Liver Differential Genes.csv")
write.csv(genes_only, "Liver Differential Genes.csv")
?normalizeBetweenArrays
twiDataMatrix <- normalizeBetweenArrays(twiDataMatrix)
twiDataMatrix <- normalizeBetweenArrays(twiDataMatrix, method  = "scale")
twi_com <- ComBat(twiDataMatrix, twi_annot$batch, twi_annot$exp)
twi_fit <- lmFit(twi_com, twi_design)
twi_fit2 <- eBayes(contrasts.fit(twi_fit, twiMT_M.contrasts))
twi_fit2$genes$Symbol <- getSYMBOL(twi_fit2$genes$ID,'lumiMouseAll.db')
#fit2$genes$PMID <- getPMID(fit2$genes$ID,'lumiMouseAll.db')
twi_fit2$genes$PMID <- NULL
twi_fit2$genes$EG <- getEG(twi_fit2$genes$ID,'lumiMouseAll.db')
twi_fit2$genes$RefSeq <- nuID2RefSeqID(twi_fit2$genes$ID, lib.mapping = "lumiMouseIDMapping")
twiM_MT_results <- topTable(twi_fit2,number=length(which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$adj.P.Val<.05)),
adjust.method='BH')
genes_only <- twiM_MT_results[which(twiM_MT_results$Symbol != "NA"),]
View(genes_only)
twiDataMatrix <- normalizeBetweenArrays(twiDataMatrix, method  = "quantile")
twi_com <- ComBat(twiDataMatrix, twi_annot$batch, twi_annot$exp)
twi_fit <- lmFit(twi_com, twi_design)
twi_fit2 <- eBayes(contrasts.fit(twi_fit, twiMT_M.contrasts))
twi_fit2$genes$Symbol <- getSYMBOL(twi_fit2$genes$ID,'lumiMouseAll.db')
#fit2$genes$PMID <- getPMID(fit2$genes$ID,'lumiMouseAll.db')
twi_fit2$genes$PMID <- NULL
twi_fit2$genes$EG <- getEG(twi_fit2$genes$ID,'lumiMouseAll.db')
twi_fit2$genes$RefSeq <- nuID2RefSeqID(twi_fit2$genes$ID, lib.mapping = "lumiMouseIDMapping")
twiM_MT_results <- topTable(twi_fit2,number=length(which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$adj.P.Val<.05)),
adjust.method='BH')
genes_only <- twiM_MT_results[which(twiM_MT_results$Symbol != "NA"),]
write.csv(genes_only, "Liver Differential Genes.csv")
View(hkM_MT_results)
View(genes_only)
twiDataMatrix <- normalizeBetweenArrays(twiDataMatrix, method  = "cyclicloess")
wi_com <- ComBat(twiDataMatrix, twi_annot$batch, twi_annot$exp)
twi_fit <- lmFit(twi_com, twi_design)
twi_fit2 <- eBayes(contrasts.fit(twi_fit, twiMT_M.contrasts))
twi_fit2$genes$Symbol <- getSYMBOL(twi_fit2$genes$ID,'lumiMouseAll.db')
#fit2$genes$PMID <- getPMID(fit2$genes$ID,'lumiMouseAll.db')
twi_fit2$genes$PMID <- NULL
twi_fit2$genes$EG <- getEG(twi_fit2$genes$ID,'lumiMouseAll.db')
twi_fit2$genes$RefSeq <- nuID2RefSeqID(twi_fit2$genes$ID, lib.mapping = "lumiMouseIDMapping")
twiM_MT_results <- topTable(twi_fit2,number=length(which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$adj.P.Val<.05)),
adjust.method='BH')
genes_only <- twiM_MT_results[which(twiM_MT_results$Symbol != "NA"),]
write.csv(genes_only, "Liver Differential Genes.csv")
View(genes_only)
fit <- lmFit(twiDataMatrix, twi_design)
fit2 <- eBayes(contrasts.fit(fit, twiMT_M.contrasts))
fit2$genes$Symbol <- getSYMBOL(twi_fit2$genes$ID,'lumiMouseAll.db')
fit2$genes$RefSeq <- nuID2RefSeqID(twi_fit2$genes$ID, lib.mapping = "lumiMouseIDMapping")
results <- topTable(fit2,number=length(which(topTable(fit2,adjust.method='BH',
number=length(fit2$genes$ID))$adj.P.Val<.05)),
adjust.method='BH')
genes_only <- results[which(results$Symbol != "NA"),]
View(genes_only)
twiDataMatrix <- normalizeBetweenArrays(twiDataMatrix, method  = "cyclicloess")
twi_com <- ComBat(twiDataMatrix, twi_annot$batch, twi_annot$exp)
twi_fit <- lmFit(twi_com, twi_design)
twi_fit2 <- eBayes(contrasts.fit(twi_fit, twiMT_M.contrasts))
twi_fit2$genes$Symbol <- getSYMBOL(twi_fit2$genes$ID,'lumiMouseAll.db')
#fit2$genes$PMID <- getPMID(fit2$genes$ID,'lumiMouseAll.db')
twi_fit2$genes$PMID <- NULL
twi_fit2$genes$EG <- getEG(twi_fit2$genes$ID,'lumiMouseAll.db')
twi_fit2$genes$RefSeq <- nuID2RefSeqID(twi_fit2$genes$ID, lib.mapping = "lumiMouseIDMapping")
twiM_MT_results <- topTable(twi_fit2,number=length(which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$adj.P.Val<.05)),
adjust.method='BH')
genes_only <- twiM_MT_results[which(twiM_MT_results$Symbol != "NA"),]
write.csv(genes_only, "Liver Differential Genes.csv")
View(genes_only)
twiM_MT_results <- topTable(twi_fit2,number=length(which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$B<0)),
adjust.method='BH')
genes_only <- twiM_MT_results[which(twiM_MT_results$Symbol != "NA"),]
View(genes_only)
twiM_MT_results <- topTable(twi_fit2,number=length(which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$B<0)),
adjust.method='BH')
View(twiM_MT_results)
twiM_MT_results <- topTable(twi_fit2,number=length(which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$B<0)),
adjust.method='BH')
length(twi_fit2$genes$ID))$B<0)
which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$B<0)
topTable(twi_fit2, adjust.method = "BH")
topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))
twiM_MT_results <- topTable(twi_fit2,number=length(which(topTable(twi_fit2,adjust.method='BH',
number=length(twi_fit2$genes$ID))$B>0)),
adjust.method='BH')
View(twiM_MT_results)
genes_only <- twiM_MT_results[which(twiM_MT_results$Symbol != "NA"),]
View(genes_only)
write.csv(genes_only, "Liver Differential Genes.csv")
liver <- read.csv("Liver Differential Genes.csv")
prostate <- read.csv("MycCaP Twist v Vector Gene Expression.csv")
lung <- read.csv("CRT_CR_results.csv")
liver.sym <- liver$Symbol
prostate.sym <- prostate$Symbol
lung.sym <- lung$Symbol
shared_genes <- intersect(liver.sym, intersect(lung.sym, prostate.sym))
normDataMatrix <- normalizeBetweenArrays(selDataMatrix, method = "cyclicloess")
file_list <- c(CTR_PATH, CR_PATH, OTHER_DATA_PATH)
x.lumi <- lumiR.batch(file_list, lib.mapping = "lumiMouseIDMapping", sampleInfoFile = LIST_PATH)
lumi.T <- lumiT(x.lumi, method = "log2")
dataMatrix <- exprs(lumi.T)
presentCount <- detectionCall(lumi.T)
selDataMatrix <- dataMatrix[presentCount > 0,]
probeList <- rownames(selDataMatrix)
normDataMatrix <- normalizeBetweenArrays(selDataMatrix, method = "cyclicloess")
model <- model.matrix(~0 + exp)
fit <- lmFit(normDataMatrix, model)
norm_fit2 <- eBayes(contrasts.fit(fit, CR_CRT.contrasts))
CR_CRT.contrasts <- makeContrasts(exprtTATwistRas-expras,
levels=batch_design)
contrasts <- makeContrasts(exprtTATwistRas-expras,
levels=model)
norm_fit2 <- eBayes(contrats.fit(batch_fit, contrasts))
norm_fit2 <- eBayes(contrasts.fit(batch_fit, contrasts))
norm_fit2 <- eBayes(contrasts.fit(fit, contrasts))
norm_fit2$genes$Symbol <- getSYMBOL(fit2$genes$ID,'lumiMouseAll.db')
norm_fit2$genes$Symbol <- getSYMBOL(norm_fit2$genes$ID,'lumiMouseAll.db')
norm_results <- topTable(norm_fit2,number=length(which(topTable(norm_fit2,adjust.method='BH',
number=length(norm_fit2$genes$ID))$adj.P.Val<0.05)),
adjust.method='BH')
View(norm_results)
write.csv(norm_results, "CRT_CR_results.csv")
WD <- "C:/Users/rwill127/Documents/GitHub/EMT_Gene_Sig"
setwd(WD)
liver <- read.csv("Liver Differential Genes.csv")
prostate <- read.csv("MycCaP Twist v Vector Gene Expression.csv")
lung <- read.csv("CRT_CR_results.csv")
liver.sym <- liver$Symbol
prostate.sym <- prostate$Symbol
lung.sym <- lung$Symbol
shared_genes <- intersect(liver.sym, intersect(lung.sym, prostate.sym))
fix(shared_genes)
build_table <- function(gene_list){
full_table<-data.frame(row.names = gene_list)
full_table$p.lung <- lung$adj.P.Val[which(unique(lung$Symbol)%in%shared_genes)]
full_table$fc.lung <- lung$logFC[which(unique(lung$Symbol)%in%shared_genes)]
#full_table$direction.lung
full_table$p.liver <- liver$adj.P.Val[which(unique(liver$Symbol)%in%shared_genes)]
full_table$fc.liver <- liver$logFC[which(unique(liver$Symbol)%in%shared_genes)]
full_table$p.prostate <- prostate$adj.P.Val[which(unique(prostate$Symbol)%in%shared_genes)]
full_table$fc.prostate <- prostate$logFC[which(unique(lung$Symbol)%in%shared_genes)]
#full_table$direction.prostate <- apply(prostate$logFC, 1, function(x) if (x>0) return ("up") else return ("down"))
return(full_table)
}
info <- build_table(shared_genes)
View(info)
build_table <- function(gene_list){
full_table<-data.frame(row.names = gene_list)
full_table$p.lung <- lung$adj.P.Val[which(unique(lung$Symbol)%in%shared_genes)]
full_table$fc.lung <- lung$logFC[which(unique(lung$Symbol)%in%shared_genes)]
#full_table$direction.lung
full_table$p.liver <- liver$adj.P.Val[which(unique(liver$Symbol)%in%shared_genes)]
full_table$fc.liver <- liver$logFC[which(unique(liver$Symbol)%in%shared_genes)]
full_table$p.prostate <- prostate$adj.P.Val[which(unique(prostate$Symbol)%in%shared_genes)]
full_table$fc.prostate <- prostate$logFC[which(unique(prostate$Symbol)%in%shared_genes)]
#full_table$direction.prostate <- apply(prostate$logFC, 1, function(x) if (x>0) return ("up") else return ("down"))
return(full_table)
}
info <- build_table(shared_genes)
View(prostate)
View(info)
lg_pr <- intersect(lung.sym, prostate.sym)
lg_lv <- intersect(liver.sym, lung.sym)
lv_pr <- intersect(liver.sym, lung.sym)
lv_pr <- intersect(liver.sym, prostate.sym)
fix(lv_pr)
fix(lg_lv)
fix(lg_lv)
fix(liver.sym)
fix(lg_lv)
fix(lg_pr)
?and
?or
?logical
same_sign <- function (x, y) {
if((x>0 & y >0) | (x<0 & y <0){
return TRUE
}
else {
return FALSE
}
}
same_sign <- function (x, y) {
if((x>0 & y >0) | (x<0 & y <0)){
return TRUE
}
else {
return FALSE
}
}
same_sign <- function (x, y) {
if((x>0 & y >0) | (x<0 & y <0)){
return(TRUE)
}
else {
return(FALSE)
}
}
same_sign(-1, -2)
same_sign(1, 2)
same_sign(-1, 2)
matched_lg_pr <- lg_pr[which(same_sign(lung$logFC[which(unique(lung$Symbol))],
prostate$logFC[which[unique(prostate$Symbol)]]))]
matched_lg_pr <- lg_pr[which(same_sign(lung$logFC[which(unique(lung$Symbol))],
prostate$logFC[which[unique(prostate$Symbol)]])
==TRUE)]
lung[which(lung$Symbol %in% lg_pr)]
lung[which(lung$Symbol %in% lg_pr),]
lung[which(lung$Symbol %in% lg_pr),"logFC"]
lung[which(unique(lung$Symbol) %in% lg_pr),"logFC"]
prostate[which(unique(prostate$Symbol) %in% lg_pr, "logFC")]
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC")]
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"]
same_sign(lung[which(unique(lung$Symbol) %in% lg_pr),"logFC"],
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"])
sapply(same_sign,
lung[which(unique(lung$Symbol) %in% lg_pr),"logFC"],
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"])
?sapply
same_sign,
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"])
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"]
same_sign(lung[which(unique(lung$Symbol) %in% lg_pr),"logFC"],
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"])
same_sign <- function (x, y) {
if((x>0 && y >0) || (x<0 && y <0)){
return(TRUE)
}
else {
return(FALSE)
}
}
same_sign(lung[which(unique(lung$Symbol) %in% lg_pr),"logFC"],
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"])
mapply(same_sign,
lung[which(unique(lung$Symbol) %in% lg_pr),"logFC"],
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"]))
mapply(same_sign,
lung[which(unique(lung$Symbol) %in% lg_pr),"logFC"],
prostate[which(unique(prostate$Symbol) %in% lg_pr), "logFC"])
sign_filter(lg_pr, lung, prostate)
sign_filter <- (list, table1, table2){
mapply(same_sign,
table1[which(unique(table1$Symbol) %in% list),"logFC"],
table2[which(unique(table2$Symbol) %in% list), "logFC"])
}
sign_filter <- (list, table1, table2){
return(mapply(same_sign,
table1[which(unique(table1$Symbol) %in% list),"logFC"],
table2[which(unique(table2$Symbol) %in% list), "logFC"]))
}
sign_filter <- function(list, table1, table2){
return(mapply(same_sign,
table1[which(unique(table1$Symbol) %in% list),"logFC"],
table2[which(unique(table2$Symbol) %in% list), "logFC"]))
}
sign_filter(lg_pr, lung, prostate)
lg_pr[which(sign_filter(lg_pr, lung, prostate))]
lg_lv[which(sign_filter(lg_lv, lung, liver))]
lv_pr[which(sign_filter(lv_pr, liver, prostate))]
shared_genes <- cbind(lg_pr[which(sign_filter(lg_pr, lung, prostate))]
lg_lv[which(sign_filter(lg_lv, lung, liver))]
lv_pr[which(sign_filter(lv_pr, liver, prostate))]
)
shared_genes <- cbind(lg_pr[which(sign_filter(lg_pr, lung, prostate))],
lg_lv[which(sign_filter(lg_lv, lung, liver))],
lv_pr[which(sign_filter(lv_pr, liver, prostate))])
View(shared_genes)
shared_genes <- unique(append(lg_pr[which(sign_filter(lg_pr, lung, prostate))],
lg_lv[which(sign_filter(lg_lv, lung, liver))],
lv_pr[which(sign_filter(lv_pr, liver, prostate))]
)
)
shared_genes <- unique(append(lg_pr[which(sign_filter(lg_pr, lung, prostate))],
lg_lv[which(sign_filter(lg_lv, lung, liver))]
)
)
shared_genes
shared_genes <- unique(append(shared_genes,
lv_pr[which(sign_filter(lv_pr, liver, prostate))]
)
)
fix(shared_genes)
probes2genes <- as.list(mogene10sttranscriptclusterSYMBOL)
all_genes <- unique(unlist(probes2genes))
gsea_fisher <- function(sig_genes, geneset){
geneset <- unlist(geneset)
sig_in_set <- length(intersect(sig_genes, geneset))
sig_not_in_set <- length(sig_genes) - sig_in_set
not_sig_in_set <- length(geneset) - sig_in_set
not_sig_not_in_set <- length(all_genes) - not_sig_in_set
data <- matrix(c(sig_in_set, not_sig_in_set, sig_not_in_set, not_sig_not_in_set), nrow = 2)
test <- fisher.test(data,alternative='greater')
return(test$p.value)
}
subset_gsea_test <- function(sig_genes){
gsea_tests <- p.adjust(sapply(GSEASets$genesets, function(x){gsea_fisher(names(sig_genes), x)}), method = "BH")
names(gsea_tests) <- GSEASets$geneset.names
sig_genesets <-gsea_tests[which(gsea_tests < .05)]
return(sig_genesets)
}
GSEASets <- GSA.read.gmt('c2.all.v3.0.symbols.gmt')
subset_gsea_test(toupper(shared_genes))
subset_gsea_test(toupper(prostate))
raw_p_plot <- ggplot(full_results, aes(x = P.Value))
raw_p_plot <- raw_p_plot +
geom_histogram(binwidth = .02,
aes(fill = ..count..)) +
scale_fill_gradient("Count",
low = "dark green",
high = "dark red")
raw_p_plot
adj_p_plot <- ggplot(full_results, aes(x = adj.P.Val))
adj_p_plot <- adj_p_plot +
geom_histogram(binwidth = .01,
aes(fill = ..count..)) +
scale_fill_gradient("Count",
low = "dark green",
high = "dark red") +
geom_vline(xintercept = .05)
adj_p_plot
shared_genes <- lg_lv[which(sign_filter(lg_lv, lung, liver))]
fix(shared_genes)
build_table(shared_genes)
build_table <- function(gene_list){
full_table<-data.frame(row.names = gene_list)
full_table$p.lung <- lung$adj.P.Val[which(unique(lung$Symbol)%in%shared_genes)]
full_table$fc.lung <- lung$logFC[which(unique(lung$Symbol)%in%shared_genes)]
#full_table$direction.lung
full_table$p.liver <- liver$adj.P.Val[which(unique(liver$Symbol)%in%shared_genes)]
full_table$fc.liver <- liver$logFC[which(unique(liver$Symbol)%in%shared_genes)]
#full_table$direction.prostate <- apply(prostate$logFC, 1, function(x) if (x>0) return ("up") else return ("down"))
return(full_table)
}
build_table(shared_genes)
shared_genes <- lg_lv[which(sign_filter(lg_lv, lung, liver))]
sign_filter(lg_lv, lung, liver)
lg_lv[which(sign_filter(lg_lv, lung, liver))]
lg_lv[which(sign_filter(lg_lv, lung, liver)== TRUE)]
lg_lv
build_table(lg_lv)
View(liver)
sign_filter(lg_lv[3], lung, liver)
lg_lv
lg_lv[3]
lung[which(unique(lung$Symbol) %in% lg_lv)]
table2[which(unique(table2$Symbol) %in% list),"logFC"]))
lung[which(unique(lung$Symbol) %in% lg_lv), "logFC"]
build_table <- function(gene_list){
full_table<-data.frame(row.names = gene_list)
full_table$p.lung <- lung$adj.P.Val[which(unique(lung$Symbol)%in%gene_list)]
full_table$fc.lung <- lung$logFC[which(unique(lung$Symbol)%in%gene_list)]
#full_table$direction.lung
full_table$p.liver <- liver$adj.P.Val[which(unique(liver$Symbol)%in%gene_list)]
full_table$fc.liver <- liver$logFC[which(unique(liver$Symbol)%in%gene_list)]
#full_table$direction.prostate <- apply(prostate$logFC, 1, function(x) if (x>0) return ("up") else return ("down"))
return(full_table)
}
lung[which(lung$Symbol == "Eif4a2"),]
lung$logFC[which(lung$Symbol == "Eif4a2")]
View(liver)
View(lung)
liver$logFC[which(lung$Symbol == "Eif4a2")]
lg_lv <- intersect(liver.sym, lung.sym)
fix(lg_lv)
build_table(lg_lv)
tab <- build_table(lg_lv)
tab$filter <- sign_filter(lg_lv)
tab$filter <- sign_filter(lg_lv, lung, liver)
View(tab)
tab <- tab[which(tab$filter == TRUE)]
tab <- tab[which(tab$filter == TRUE),]
View(tab)
write.csv(tab, "Lung Liver Overlap Genes.csv")
getwd()
